# GitLab

pknife() {
  (
  cd ~/workspace/ops.gitlab.net/gitlab-cookbooks/chef-repo
  bundle exec knife $@
  )
}

alias lschefnodes="pknife node list"

sshchefnode() {
  cmd="ssh $(lschefnodes | fzf)"
  print -s "$cmd"
  ${=cmd}
}

kproxy() {
  context="${1:-}"
  if [ -z "${context:-}" ]; then
    context=$(kubectl config get-contexts --no-headers -o name | fzf)
  fi

  old_context=$(kubectl config current-context)
  kubectl config use-context "$context"
  # TODO at the time of writing, not every environment has a console, not every
  # environment's bastion has access to its clusters' control planes, and ops is
  # only accessible via the gstg console. This should all change soon.
  declare -A bastions=(
    ["gstg"]="console-01-sv-gstg.c.gitlab-staging-1.internal"
    ["gstg-us-east1-b"]="console-01-sv-gstg.c.gitlab-staging-1.internal"
    ["gstg-us-east1-c"]="console-01-sv-gstg.c.gitlab-staging-1.internal"
    ["gstg-us-east1-d"]="console-01-sv-gstg.c.gitlab-staging-1.internal"

    ["gprd"]="console-01-sv-gprd.c.gitlab-production.internal"
    ["gprd-us-east1-b"]="console-01-sv-gprd.c.gitlab-production.internal"
    ["gprd-us-east1-c"]="console-01-sv-gprd.c.gitlab-production.internal"
    ["gprd-us-east1-d"]="console-01-sv-gprd.c.gitlab-production.internal"

    ["ops"]="console-01-sv-gstg.c.gitlab-staging-1.internal"
    ["org-ci"]="bastion-01-inf-org-ci.c.gitlab-org-ci-0d24e2.internal"
  )

  ssh -o ControlPersist=no -D 26443 -N "${bastions[$context]}" & ssh_pid=$!
  echo "Opening a new shell targetting ${context}"
  HTTP_PROXY=socks5://localhost:26443 $SHELL
  echo "Closing tunnel"
  kill "${ssh_pid}"
  kubectl config use-context "$old_context"
}
